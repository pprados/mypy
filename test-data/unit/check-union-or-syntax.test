-- Type checking of union types with '|' syntax

[case testUnionOrSyntaxWithTwoBuiltinsTypes]
# flags: --python-version 3.9
def f(x: int | str) -> int | str:
    reveal_type(x)  # N: Revealed type is 'Union[builtins.int, builtins.str]'
    z: int | str = 0
    reveal_type(z)  # N: Revealed type is 'Union[builtins.int, builtins.str]'
    return x
reveal_type(f)  # N: Revealed type is 'def (x: Union[builtins.int, builtins.str]) -> Union[builtins.int, builtins.str]'

[case testUnionOrSyntaxWithThreeBuiltinsTypes]
# flags: --python-version 3.9
def f(x: int | str | float) -> int | str | float:
    reveal_type(x)  # N: Revealed type is 'Union[builtins.int, builtins.str, builtins.float]'
    z: int | str | float = 0
    reveal_type(z)  # N: Revealed type is 'Union[builtins.int, builtins.str, builtins.float]'
    return x

reveal_type(f)  # N: Revealed type is 'def (x: Union[builtins.int, builtins.str, builtins.float]) -> Union[builtins.int, builtins.str, builtins.float]'

[case testUnionOrSyntaxWithTwoTypes]
# flags: --python-version 3.9
class A: pass
class B: pass
def f(x: A | B) -> A | B:
    reveal_type(x)  # N: Revealed type is 'Union[__main__.A, __main__.B]'
    z: A | B = A()
    reveal_type(z)  # N: Revealed type is 'Union[__main__.A, __main__.B]'
    return x
reveal_type(f)  # N: Revealed type is 'def (x: Union[__main__.A, __main__.B]) -> Union[__main__.A, __main__.B]'

[case testUnionOrSyntaxWithThreeTypes]
# flags: --python-version 3.9
class A: pass
class B: pass
class C: pass
def f(x: A | B | C) -> A | B | C:
    reveal_type(x)  # N: Revealed type is 'Union[__main__.A, __main__.B, __main__.C]'
    z: A | B | C = A()
    reveal_type(z)  # N: Revealed type is 'Union[__main__.A, __main__.B, __main__.C]'
    return x
reveal_type(f)  # N: Revealed type is 'def (x: Union[__main__.A, __main__.B, __main__.C]) -> Union[__main__.A, __main__.B, __main__.C]'

[case testUnionOrSyntaxWithLiteral]
# flags: --python-version 3.9
from typing_extensions import Literal
reveal_type(Literal[4] | str)  # N: Revealed type is 'Any'

[case testUnionOrSyntaxWithBadOperator]
# flags: --python-version 3.9
x: 1 + 2  # E: Invalid type comment or annotation

[case testUnionOrSyntaxWithBadOperands]
# flags: --python-version 3.9
x: int | 42  # E: Invalid type: try using Literal[42] instead?
y: 42 | int  # E: Invalid type: try using Literal[42] instead?
z: str | 42 | int  # E: Invalid type: try using Literal[42] instead?

[case testUnionOrSyntaxInComment]
# flags: --python-version 3.9
x = 1  # type: int | str
